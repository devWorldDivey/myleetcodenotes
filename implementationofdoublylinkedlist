class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        self.prev = None


class DoublyLinkedList:
    def __init__(self, data):
        new_node = Node(data)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        return True

    def pop(self):
        if self.length == 0:
            return None
        if self.length == 1:
            self.head = None
            self.tail = None
        else:
            temp = self.tail
            self.tail = temp.prev
            self.tail.next = None
            temp.prev = None
        self.length -= 1
        return temp

    def print_list(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next

    def prepend(self,data):
        new_node = Node(data)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
        self.length += 1
        return True

    def pop_first(self):
        if self.length == 0:
            return None
        elif self.length == 1:
            self.head = None
            self.tail = None
        else:
            temp = self.head
            self.head = self.head.next
            self.head.prev = None
            temp.next = None
        self.length -= 1
        return True

    def get_DoubleLL(self,index):
        if index < 0 or index > self.length:
            return None
        temp = self.head
        if index <= self.length/2:
            for _ in range(index):
                temp = temp.next
        else:
            temp = self.tail
            for _ in range(self.length-1,index,-1):
                temp = temp.prev
        return temp

    def set_DoubleLL(self,index,data):
        temp = self.get_DoubleLL(index)
        if temp is not None:
            temp.value = data
            return True
        else:
            return False

    def insert(self,value,index):
        if index < 0 or index > self.length:
            return None
        if index == 0:
            return self.prepend(value)
        if index == self.length:
            return self.append(value)
        new_node = Node(value)
        before = self.get_DoubleLL(index)
        after = before.next

        new_node.prev = before
        new_node.next = after
        before.next = new_node
        after.prev = new_node

        self.length += 1
        return True

    def remove(self,index):
        if index < 0 or index > self.length:
            return None
        if index == 0:
            return self.pop_first()
        if index == self.length-1:
            return self.pop()

        temp = self.get_DoubleLL(index)

        temp.next.prev = temp.prev
        temp.prev.next = temp.next
        temp.next = None
        temp.prev = None

        self.length -= 1
        return temp

# Test the designed Doubly LinkedList
mydoublelinkedlist = DoublyLinkedList(5)
mydoublelinkedlist.append(10)
mydoublelinkedlist.append(12)
mydoublelinkedlist.append(14)
mydoublelinkedlist.append(16)
mydoublelinkedlist.append(18)
mydoublelinkedlist.pop()
mydoublelinkedlist.prepend(2)
mydoublelinkedlist.pop_first()
mydoublelinkedlist.set_DoubleLL(3,100)
mydoublelinkedlist.set_DoubleLL(2,200)
mydoublelinkedlist.remove(4)
mydoublelinkedlist.print_list()
